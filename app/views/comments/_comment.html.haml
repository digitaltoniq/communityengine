- if comment.user
  .entry.box2{:id => "comment_#{comment.id}"}
    .author
      %p.photo
        = link_to image_tag(comment.user.avatar_photo_url(:small), :alt => "#{comment.user}"), user_path(comment.user), :rel => 'bookmark', :class => 'photo', :title => "#{comment.user}'s profile"
      %p.name
        = link_to comment.user, user_path(comment.user), :class => 'url'
      %p.location= user_location(comment.user)
      %p.posted
        = time_ago_in_words(comment.created_at)
      -#%p.about
        = link_to comment.commentable, company_post_path(comment.commentable)
    
    .comment
      %p.i-like{:id => "likeable_#{comment.id}_toggle"}
        = render :partial => 'likeable/toggle', :locals => { :likeable => comment }
      %p.likes
        = :people_like_this.l(:count => comment.likes_count)
      .content
        = comment.comment
    
    %p.control-links
      - if ( comment.can_be_deleted_by(current_user) )
        %span.delete
          = link_to_remote("Remove Response".l, {:url => comment_path(comment.commentable_type, comment.commentable_id, comment), :method => :delete, 500 => 'alert(\'Sorry, there was a server error\'); return false',  :success => visual_effect(:fade, "comment_#{comment.id}"), :confirm => :are_you_sure_you_want_to_permanently_delete_this_comment.l} )



-#
  -#
    -#
      %ul
        %li.fn
          = link_to comment.user, user_path(comment.user), :class => 'url'
        %li.update
          %a{"href"=> commentable_url(comment), "rel"=>"bookmark"}
            %abbr.published{"title"=>"#{comment.created_at}"}
              = comment.created_at.strftime("%B %d, %Y")
        -if ( comment.can_be_deleted_by(current_user) )
          %li.delete=link_to_remote("Delete".l, {:url => comment_path(comment.commentable_type, comment.commentable_id, comment), :method => :delete, 500 => 'alert(\'Sorry, there was a server error\'); return false',  :success => visual_effect(:fade, "comment_#{comment.id}"), :confirm => :are_you_sure_you_want_to_permanently_delete_this_comment.l} )
        -if logged_in? or comment.likes_count > 0
          %li.like{:id => "likeable_#{comment.id}_toggle"}
            = render :partial => 'likeable/toggle', :locals => { :likeable => comment, :liker => current_user }
    .entry-content= comment.comment

-# else
  .entry{:id => "comment_#{comment.id}"}
    .author
      %h5
        %a{:href => '#', :rel => 'bookmark', :class => 'photo', :onclick => 'return false;'}
          = image_tag(Photo.default.public_filename(:small))
      %ul
        %li.fn
          =link_to_unless(comment.author_url.blank?, h(comment.username), h(comment.author_url)){ h(comment.username) }
        %li.update
          %a{"href"=> commentable_url(comment), "rel"=>"bookmark"}
            %abbr.published{"title"=>"#{comment.created_at}"}
              = comment.created_at.strftime("%B %d, %Y")
        -if ( comment.can_be_deleted_by(current_user) )
          %li.delete=link_to_remote("Delete".l, {:url => comment_path(comment.commentable_type, comment.commentable_id, comment), :method => :delete, 500 => 'alert(\'Sorry, there was a server error\'); return false',  :success => visual_effect(:fade, "comment_#{comment.id}"), :confirm => "Are you sure you want to permanently delete this comment"} )
        %li.like{:id => "likeable_#{comment.id}_toggle"}
          = render :partial => 'likeable/toggle', :locals => { :likeable => comment }
    .entry-content= comment.comment

- highlighted ||= nil
- if highlighted
  %script{"type"=>"text/javascript"}
    =visual_effect :highlight, "comment_#{comment.id}", :duration => 1 

